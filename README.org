* Ping application

This application is a POC, implementing the following behaviour using Apache Kafka as broker:

#+begin_src plantuml :file seq.svg
  ping -> broker: Ping
  pong <- broker: Ping
  pong -> broker: Pong
  ping <- broker: Pong
#+end_src

#+RESULTS:
[[file:seq.svg]]

Both the client and the server component are implemented in Rust using the [[https://github.com/vnermolaev/oblivious-state-machine][Oblivious state machine]] and [[https://github.com/kafka-rust/kafka-rust][kafka-rust]] libraries.

* Setup development environment

#+begin_src bash
  docker-compose up
#+end_src

* Ping example

In order to run the Ping component with logging, set ~RUST_LOG~, e.g.:

#+begin_src bash
  RUST_LOG=trace cargo run --bin kafka-ping-stm
#+end_src

* Ping state machine

#+begin_src plantuml :file ping.svg
  [*] -> SendingPing
  SendingPing -> ListeningForPong
  ListeningForPong -> [*]: Pong
#+end_src

#+RESULTS:
[[file:ping.svg]]


* Pong example

In order to run the Pong component with logging, set ~RUST_LOG~, e.g.:

#+begin_src bash
  RUST_LOG=trace cargo run --bin kafka-pong-stm
#+end_src

* Pong state machine

#+begin_src plantuml :file pong.svg
  [*] -> ListeningForPing
  ListeningForPing -> SendingPong: Ping(id)
  SendingPong -> ListeningForPing: id != 0
  SendingPong -> [*]: id == 0
#+end_src

#+RESULTS:
[[file:pong.svg]]
