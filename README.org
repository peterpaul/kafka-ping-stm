* Ping application

This application is a POC, implementing the following behaviour using Apache Kafka as broker:

#+begin_src plantuml :file architecture.svg :exports results
  @startuml
  left to right direction
  title Ping Architecture

  !include <cloudinsight/kafka>
  !include <logos/jaeger>
  together {
      queue "Apache Kafka" as kafka <<$kafka>> {
          queue ping
          queue pong
          ping -[hidden]l-> pong
      }

      component "**Jaeger**" as jaeger <<$jaeger>>
  }

  component "Ping Client" as ping_client {
      together {
          component "producer" as ping_producer
          component "consumer" as ping_consumer
      }
      component "stm" as ping_stm
      ping_stm --> ping_producer: 1
      ping_consumer --> ping_stm: 2
  }

  component "Ping Server" as ping_server {
      together {
          component "consumer" as pong_consumer
          component "producer" as pong_producer
      }
      component "stm" as pong_stm
      pong_consumer -down-> pong_stm: 1
      pong_stm -> pong_producer: 2
  }

  ping_client -> jaeger: Tracing
  ping_server -> jaeger: Tracing

  ping_producer --> ping: Ping
  ping --> pong_consumer: Ping
  pong <-- pong_producer: Pong
  ping_consumer <-- pong: Pong
  @enduml
#+end_src

#+RESULTS:
[[file:architecture.svg]]

Logs and traces are collected using [[https://opentelemetry.io][OpenTelemetry]], and can be viewed using [[https://www.jaegertracing.io/][Jaeger]].


Both the client and the server component are implemented in Rust using the [[https://github.com/vnermolaev/oblivious-state-machine][Oblivious state machine]] and [[https://github.com/kafka-rust/kafka-rust][kafka-rust]] libraries.

* Setup development environment

The development environment is setup using ~docker-compose~, and consists of a Kafka server, including zookeeper, kafka-ui and Jaeger.

#+begin_src bash
  docker-compose up
#+end_src

This will download and start all the necessary services. It will also create the topics that needed for this POC.

You can Contact Kafka UI at: [[http://localhost:8080/]]

You can view Jaeger at: [[http://localhost:16686/]]

* Ping Client

The Ping client is implemented as a single-shot CLI application.

In order to run the Ping component with logging, set ~RUST_LOG~, e.g.:

#+begin_src bash
  RUST_LOG=trace cargo run --bin ping
#+end_src

Or spawn many concurrent tasks:

#+begin_src bash
  cargo build --release
  for i in {0..31};
  do
      RUST_LOG=info target/release/ping &
  done
#+end_src

** Ping state machine

#+begin_src plantuml :file ping.svg :exports results
  title Ping Client State Machine
  state StateMachineRunner {
          state start <<entryPoint>>
          state incoming <<entryPoint>>
          start -> PingState
          PingState : ping_to_send: Ping
          PingState : received_pong: Option<Pong>
          PingState -[dotted]-> outgoing <<exitPoint>>: Ping\n**1**
          incoming -[dotted]-> PingState: Pong\n**2**
          PingState --> terminal <<exitPoint>>: **3**
  }
  [*] --> start: Ping
  terminal --> [*]
  consumer -[dotted]-> incoming: Pong
  outgoing -[dotted]-> producer: Ping
#+end_src

#+RESULTS:
[[file:ping.svg]]

* Ping Server

The Ping server is implemented using ~tokio~. For each incoming message, a new task is spawned, that will execute the STM.

In order to run the Pong component with logging, set ~RUST_LOG~, e.g.:

#+begin_src bash
  RUST_LOG=info cargo run --bin pong
#+end_src

** Pong state machine

#+begin_src plantuml :file pong.svg :exports results
  title Ping Server State Machine
  state StateMachineRunner {
          state start <<entryPoint>>
          state incoming <<entryPoint>>
          start --> ListeningForPing
          ListeningForPing : received_ping: Option<Ping>
          incoming -[dotted]-> ListeningForPing: Ping
          incoming -[dotted]-> SendingPong: PongSent
          SendingPong : received_ping: Ping
          SendingPong : sent_pong: Option<Pong>
          ListeningForPing -> SendingPong: Ping
          SendingPong -[dotted]-> outgoing <<exitPoint>>: Pong
          SendingPong --> terminal <<exitPoint>>
  }
  [*] --> start
  terminal --> [*]
  consumer -[dotted]-> incoming: Ping
  outgoing -[dotted]-> producer: Pong
  note on link
          emit //PongSent//
          to **incoming**
  end note
  note right of incoming
          receive //PongSent//
          from **producer**
  end note
#+end_src

#+RESULTS:
[[file:pong.svg]]

After sending the ~Pong~ message, a ~PongSent~ event is emitted, this will ensure that the state machine is active until all messages are processed.
Without this in place, there could be a race condition, since tokio channels are used to communicate outgoing messages, there could be a race condition where the outgoing channel is closed before the producer handled the message.

* TODO

- Use ~apache-avro = { version = "X.Y.Z", features = ["derive"] }~ instead of JSON, and publish schema to schemaregistry.
- Create topics from client/server?
- In the Ping server, the kafka messages are sent synchronously from the main thread, which might block the progression of other statemachines.
  Send the kafka messages from another task (similar to receiving the kafka messages), and communicate via a channel.
